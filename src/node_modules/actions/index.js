let startGame = (players) => {
        return {
            type: 'GAME_START',
            players
        };
    },
    beginRound = () => { return { type: 'ROUND_BEGIN' }; },
    endRound = () => (dispatch, getState) => {
        dispatch({ type: 'ROUND_END' });
        
        if (getState().get('roundsRemains') == 0) {
            dispatch({ type: 'GAME_END' });
        }
    },
    processCards = () => { return { type: 'CARDS_RESOLUTION' }; },
    playCard = (player, card) => (dispatch, getState)=> {
        dispatch({
            type: 'PLAY_CARD',
            player,
            card
        });

        let state = getState();

        if (state.get('cardsInPlay').size == state.get('players').size) {
            dispatch(processCards());
        }
    },
    placeTrader = (player, resource) => (dispatch, getState) => {
        dispatch({
            type: 'PLACE_TRADER',
            player,
            resource
        });

        if (getState().get('players').every(p => !p.get('canPlaceTrader'))) {
            dispatch({
                type: 'TRADERS_RESOURCE_COLLECTION'
            });
        }
    };


export {
    startGame,
    beginRound,
    endRound,
    playCard,
    placeTrader
};
