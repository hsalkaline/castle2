import Immutable from 'immutable';
import { makeResourceBag, transferGold, transferResources } from 'reducers/common';
import { getPlayerPath } from 'stateUtils';
import logger from 'service/logger';

const building = (count, constructionPrice, prices, winPoints) => {
    return {
        count,
        constructionPrice,
        winPoints,
        servantPlaces: prices.map(price => {
            return {
                price: price,
                player: null
            };
        })
    };
};

const gameStart = (state, players) => {
    logger.trace('args', state, players);
    
    state = Immutable.fromJS({
        gameStarted: true,
        roundsRemains: players.length == 3 ? 15 : 12,
        treasury: makeResourceBag({
            gold: 26 * 5 + 8 * 3 + 51,
            sand: 20,
            wood: 18,
            clay: 15,
            stone: 15,
            silver: 15
        }),
        defenceTower: {
            resources: makeResourceBag()
        },
        players: players.map(color => {
            return {
                color: color,
                resources: makeResourceBag(),
                winPoints: 0,
                servants: players.length == 2 ? 7 : 6,
                cards: {
                    hand: Immutable.Set(['TRADER', 'MESSENGER', 'BUILDER', 'STONEMASON', 'WORKER1', 'WORKER2', 'WORKER3', 'ARCHITECT']),
                    discardPile: Immutable.Set([])
                }
            };
        }),
        currentPlayer: players[0],
        buildings: {
            warehouse: building(1, 24, [14], 14),
            tavern: building(1, 22, [12, 6], 12),
            bigGates: building(1, 18, [10], 10),
            smallGates: building(1, 12, [5], 6),
            stables: building(1, 18, [16, 12], 14),
            servantsHouse: building(1, 18, [6, 7, 8], 14),
            market: building(1, 0, [6, 6], 0),
            palace: building(1, 30, [17, 17], 18),
            smithy: building(1, 0, [12, 6], 0),
            well: building(1, 12, [], 10),
            house: building(6, 8, [], 6),
            tower: building(8, 10, [], 8)
        }
    });

    players.forEach(color => {
        state = transferResources(
            state,
            ['treasury'],
            [...getPlayerPath(state, color), 'resources'],
            {
                sand: 1,
                wood: 1,
                gold: 3
            });
    });

    state = transferResources(
        state,
        ['treasury'],
        ['defenceTower', 'resources'],
        {
            sand: 1,
            wood: 1,
            clay: 1,
            stone: 1,
            silver: 1
        });

    return state;
};

const roundBegin = state => transferGold(
    state,
    ['treasury'],
    [...getPlayerPath(state, state.get('currentPlayer')), 'resources'],
    1
);

const roundEnd = state => {
    let colors = state.get('players').map(item => item.get('color')),
        currentIndex = colors.findIndex(color => color == state.get('currentPlayer')),
        nextIndex = (currentIndex + 1) % colors.size;
        
    return state
        .set('currentPlayer', colors.get(nextIndex))
        .update('roundsRemains', x => x - 1);
};

export {
    gameStart,
    roundBegin,
    roundEnd
};
