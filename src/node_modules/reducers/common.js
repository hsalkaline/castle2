import Immutable from 'immutable';
import logger from 'service/logger';

const makeResourceBag = (amount = {}) => Immutable.Map({
    sand: amount.sand || 0,
    wood: amount.wood || 0,
    clay: amount.clay || 0,
    stone: amount.stone || 0,
    silver: amount.silver || 0,
    gold: amount.gold || 0
});

const transferResources = (state, from, to, amount) => {
    logger.trace('args', state, from, to, amount);

    let actualAmount = state.getIn(from).mergeWith((l, r) => {
        return Math.min(l, r);
    }, makeResourceBag(amount));

    logger.debug('actualAmount = ', actualAmount);

    let result = state
            .updateIn(from, x => x.mergeWith((l, r) => l - r, actualAmount))
            .updateIn(to, x => x.mergeWith((l, r) => l + r, actualAmount));

    logger.trace('result', result);
    
    return result;
};

const transferResourcesExact = (state, from, to, amount) => {
    if (!state.get(from).every((resource, quantity) => amount[resource] <= quantity)) {
        throw 'source does not have requested resources';
    }
    return transferResources(state, from, to, amount);
};

const transferGold = (state, from, to, amount) => {
    return transferResources(state, from, to, { gold: amount });
};

const constructBuilding = (state, type) => {
    
};

export {
    makeResourceBag,
    transferResources,
    transferResourcesExact,
    transferGold
};
