import {
    getPlayerPath,
    error
} from 'stateUtils';
import logger from 'service/logger';

import {
    gameStart,
    roundBegin,
    roundEndÑŒ
} from 'reducers/game';

import {
    transferGold,
    transferResourcesExact
} from 'reducers/common';

import {
    messenger
} from 'reducers/cards';

var reducer = (state, action) => {
    if (action.type != 'GAME_START' && !state.get('gameStarted')) {
        return error(state, {
            action,
            error: 'game must be started first!'
        });
    }
    
    if (state.get('gameEnded')) {
        return error(state, {
            action,
            error: 'game over!'
        });
    }
    
    switch (action.type) {
    case 'GAME_START': {
        return gameStart(state, action.players);
    }
        
    case 'ROUND_BEGIN': {
        return roundBegin(state);
    }
        
    case 'PLAY_CARD': {
        let playerPath = getPlayerPath(state, action.player),
            cardType = action.card.type;

        if (!state.getIn([...playerPath, 'cards', 'hand']).has(cardType)) {
            return error(state, {
                action,
                error: 'cant play specified card: player have no such card in hand'
            });
        }

        state = state
            .updateIn(
                [...playerPath, 'cards', 'hand'],
                item => item.remove(cardType)
            )
            .updateIn(
                [...playerPath, 'cards', 'discardPile'],
                item => item.add(cardType)
            );
        
        switch(cardType) {
            
        case 'MESSENGER':
            return messenger(state, action.player);
        }
    }

    case 'ROUND_END': {
        return roundEnd(state);
    }
        
    case 'GAME_END': { 
        return state.set('gameEnded', true);
    }
        
    default: return state;
    }
};

export { reducer };
